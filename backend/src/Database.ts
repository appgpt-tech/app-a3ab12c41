//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { PoliciesEntity } from './db/Policies.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, PoliciesEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Policies: [
        {
          policyTitle: 'policyTitle 1',
          policyDescription: 'policyDescription 1',
          implementationDate: '2023-08-05T11:38:50.353Z',
          policyObjectives: 'policyObjectives 1',
          keyFeatures: 'keyFeatures 1',
          id: 88,
        },
        {
          policyTitle: 'policyTitle 2',
          policyDescription: 'policyDescription 2',
          implementationDate: '2025-02-16T18:18:31.092Z',
          policyObjectives: 'policyObjectives 2',
          keyFeatures: 'keyFeatures 2',
          id: 21,
        },
        {
          policyTitle: 'policyTitle 3',
          policyDescription: 'policyDescription 3',
          implementationDate: '2024-04-29T23:35:11.904Z',
          policyObjectives: 'policyObjectives 3',
          keyFeatures: 'keyFeatures 3',
          id: 60,
        },
        {
          policyTitle: 'policyTitle 4',
          policyDescription: 'policyDescription 4',
          implementationDate: '2023-07-16T18:06:01.010Z',
          policyObjectives: 'policyObjectives 4',
          keyFeatures: 'keyFeatures 4',
          id: 94,
        },
        {
          policyTitle: 'policyTitle 5',
          policyDescription: 'policyDescription 5',
          implementationDate: '2024-02-13T05:10:42.393Z',
          policyObjectives: 'policyObjectives 5',
          keyFeatures: 'keyFeatures 5',
          id: 11,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('PoliciesEntity', data.Policies);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
